Introducing Function Literals and Closures

Catching the error condition in each handler introduces a lot of repeated code. What if we could wrap each of the handlers in a function that does this validation and error checking? Go's function literals provide a powerful means of abstracting functionality that can help us here.

在每个处理函数里捕捉错误情况，得采用一大堆重复的代码。如果我们把每个处理函数包含到一个做验证和错误检查的函数里会怎样?Go的函数字面量提供了一个强大的抽象功能的方式可以在这里帮助我们。

First, we re-write the function definition of each of the handlers to accept a title string:

首先，我们重写每个处理函数的函数定义以接受title字符串:

```go
func viewHandler(w http.ResponseWriter, r *http.Request, title string)
func editHandler(w http.ResponseWriter, r *http.Request, title string)
func saveHandler(w http.ResponseWriter, r *http.Request, title string)
```

Now let's define a wrapper function that takes a function of the above type, and returns a function of type http.HandlerFunc (suitable to be passed to the function http.HandleFunc):

现在我们定义一个带有上面类型的包装函数，并返回一个http.HandlerFunc类型函数(被传到并适配http.HandleFunc函数):

```go
func makeHandler(fn func (http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
return func(w http.ResponseWriter, r *http.Request) {
  // Here we will extract the page title from the Request,
  // and call the provided handler 'fn'
}
}
```

The returned function is called a closure because it encloses values defined outside of it. In this case, the variable fn (the single argument to makeHandler) is enclosed by the closure. The variable fn will be one of our save, edit, or view handlers.

这个返回的函数被称做闭包，因为它包含了在它之外定义的值。在这个示例里，变量fn(makeHandler独一的参数)被闭包包含。变量fn将是哦我们save/edit或view处理函数中的一个。

Now we can take the code from getTitle and use it here (with some minor modifications):

现在我们可以从getTitle里拿出代码并在这里使用(做些细微的修改):

```go
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        m := validPath.FindStringSubmatch(r.URL.Path)
        if m == nil {
            http.NotFound(w, r)
            return
        }
        fn(w, r, m[2])
    }
}
```

The closure returned by makeHandler is a function that takes an http.ResponseWriter and http.Request (in other words, an http.HandlerFunc). The closure extracts the title from the request path, and validates it with the TitleValidator regexp. If the title is invalid, an error will be written to the ResponseWriter using the http.NotFound function. If the title is valid, the enclosed handler function fn will be called with the ResponseWriter, Request, and title as arguments.

闭包通过makeHandler返回的是一个函数，带有http.ResponseWritter和http.Request(换句话说，就是一个http.HandlerFunc)。此闭包从请求路径导出标题，并使用TitleValidator正则验证它。如果标题无效，一个错误将被使用http.NotFound函数写入到ResponseWriter。如果标题有效，这个被包含的处理汉化素fn将被ResponseWriter/Request和title作为参数调用。

Now we can wrap the handler functions with makeHandler in main, before they are registered with the httppackage:

现在我们可以在main函数里使用makeHandler包装这个处理函数，在他们被使用http包注册之前:

func main() {
    http.HandleFunc("/view/", makeHandler(viewHandler))
    http.HandleFunc("/edit/", makeHandler(editHandler))
    http.HandleFunc("/save/", makeHandler(saveHandler))

    http.ListenAndServe(":8080", nil)
}

Finally we remove the calls to getTitle from the handler functions, making them much simpler:

最终我们从处理函数中移除getTitle的调用，使他们更简单点:

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        http.Redirect(w, r, "/edit/"+title, http.StatusFound)
        return
    }
    renderTemplate(w, "view", p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, "edit", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
    body := r.FormValue("body")
    p := &Page{Title: title, Body: []byte(body)}
    err := p.save()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, "/view/"+title, http.StatusFound)
}
